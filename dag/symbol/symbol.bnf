/* Lexical part */

_digit : '0'-'9' ;

_letter : 'a'-'z' | 'A'-'Z' ;

_idchar : _letter | _digit | '_' ;

_time_unit : 'Y' | 'M' | 'D' | 'h' | 'm' | 's' ;

int : '1'-'9' { _digit } ;

date : '$' '{' { _time_unit | ' ' | ':' | '-' } '}' ;

id : '$' { _letter | '_' } { _idchar } ;

string : { _idchar } ;

!whitespace : ' ' | '\t' | '\n' | '\r' ;

/* Syntax part */

<<
import(
  "github.com/crackcell/hpipe/dag/symbol/token"
  "github.com/crackcell/hpipe/dag/symbol/ast"
)
>>

Expr
  : Expr "+" Term << ast.NewOperatorFromParser($0.(*ast.Expr), "+", $2.(*ast.Expr)) >>
  | Expr "-" Term << ast.NewOperatorFromParser($0.(*ast.Expr), "-", $2.(*ast.Expr)) >>
  | Term
  ;

Term
  : Term "*" Factor << ast.NewOperatorFromParser($0.(*ast.Expr), "*", $2.(*ast.Expr)) >>
  | Term "/" Factor << ast.NewOperatorFromParser($0.(*ast.Expr), "/", $2.(*ast.Expr)) >>
  | Factor
  ;

Factor
  : "(" Expr ")" << $1, nil >>
  | int          << ast.NewIntFromParser(string($0.(*token.Token).Lit)) >>
  | date         << ast.NewDateFromParser(string($0.(*token.Token).Lit)) >>
	| id           << ast.NewVarFromParser(string($0.(*token.Token).Lit)) >>
	| string       << ast.NewStringFromParser(string($0.(*token.Token).Lit)) >>
  ;
